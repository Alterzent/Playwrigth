name: Security & Dependencies

on:
  schedule:
    - cron: "0 4 * * 1,4" # Monday and Thursday at 4 AM
  push:
    branches: [main]
    paths:
      - "package*.json"
  pull_request:
    paths:
      - "package*.json"
  workflow_dispatch:

env:
  NODE_VERSION: "18.x"

jobs:
  dependency-check:
    name: Dependency Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit-results.json || true

          # Parse audit results
          VULNERABILITIES=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities | to_entries[] | "\(.key): \(.value)"' 2>/dev/null || echo "No vulnerabilities found")
          echo "vulnerabilities<<EOF" >> $GITHUB_OUTPUT
          echo "$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for outdated packages
        run: |
          echo "Checking for outdated packages..."
          npm outdated --json > outdated-packages.json || true

          if [ -s outdated-packages.json ] && [ "$(cat outdated-packages.json)" != "{}" ]; then
            echo "📦 Outdated packages found:"
            cat outdated-packages.json | jq -r 'to_entries[] | "- \(.key): \(.value.current) → \(.value.latest)"' 2>/dev/null || echo "Error parsing outdated packages"
          else
            echo "✅ All packages are up to date"
          fi

      - name: License compliance check
        run: |
          echo "Checking license compliance..."
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --json > license-report.json || true

          if [ $? -eq 0 ]; then
            echo "✅ License compliance check passed"
          else
            echo "⚠️ Some packages may have incompatible licenses"
          fi

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: |
            npm-audit-results.json
            outdated-packages.json
            license-report.json
          retention-days: 30

  vulnerability-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v4
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4

      - name: Upload Snyk results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-security-scan
          path: snyk-results.json
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD

  update-dependencies:
    name: Auto Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Update dependencies
        run: |
          echo "Updating dependencies..."

          # Update patch and minor versions
          npm update

          # Check if there are changes
          if git diff --quiet package*.json; then
            echo "No dependency updates available"
            echo "has_updates=false" >> $GITHUB_ENV
          else
            echo "Dependencies updated"
            echo "has_updates=true" >> $GITHUB_ENV
          fi

      - name: Run tests with updated dependencies
        if: env.has_updates == 'true'
        run: |
          npm ci
          npx playwright install --with-deps chromium
          npm run test:headless

      - name: Create Pull Request
        if: env.has_updates == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "🔄 Automated Dependency Updates"
          body: |
            ## 🔄 Automated Dependency Updates

            This PR contains automated dependency updates performed by GitHub Actions.

            ### ✅ Validation
            - Dependencies have been updated to latest compatible versions
            - All tests are passing with updated dependencies
            - Security vulnerabilities have been checked

            ### 📋 Changes
            - Updated patch and minor versions of dependencies
            - No breaking changes expected

            ### 🧪 Testing
            - Automated tests have been run successfully
            - Framework functionality verified

            **This PR was automatically created by GitHub Actions**

          branch: automated-dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated
            security

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, vulnerability-scan]
    if: always()

    steps:
      - name: Download audit artifacts
        uses: actions/download-artifact@v6
        with:
          pattern: security-*
          merge-multiple: true

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Report" > security-summary.md
          echo "" >> security-summary.md
          echo "**Generated:** $(date)" >> security-summary.md
          echo "" >> security-summary.md

          # NPM Audit Summary
          echo "## 📋 NPM Audit Results" >> security-summary.md
          if [ -f npm-audit-results.json ]; then
            CRITICAL=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
            HIGH=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
            MODERATE=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities.moderate // 0' 2>/dev/null || echo "0")
            
            echo "- **Critical:** $CRITICAL" >> security-summary.md
            echo "- **High:** $HIGH" >> security-summary.md
            echo "- **Moderate:** $MODERATE" >> security-summary.md
            echo "" >> security-summary.md
            
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "⚠️ **Action Required:** High or critical vulnerabilities found" >> security-summary.md
            else
              echo "✅ **Status:** No critical or high vulnerabilities" >> security-summary.md
            fi
          else
            echo "No audit results available" >> security-summary.md
          fi

          echo "" >> security-summary.md

          # Outdated Packages
          echo "## 📦 Package Updates" >> security-summary.md
          if [ -f outdated-packages.json ] && [ -s outdated-packages.json ]; then
            OUTDATED_COUNT=$(cat outdated-packages.json | jq 'length' 2>/dev/null || echo "0")
            echo "- **Outdated packages:** $OUTDATED_COUNT" >> security-summary.md
          else
            echo "- **Outdated packages:** 0" >> security-summary.md
          fi

          echo "" >> security-summary.md
          echo "---" >> security-summary.md
          echo "*Report generated by GitHub Actions Security Workflow*" >> security-summary.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_number }}
          path: security-summary.md
          retention-days: 90

      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-summary.md')) {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
