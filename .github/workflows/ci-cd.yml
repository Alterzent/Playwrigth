name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Compile TypeScript
      run: npm run compile
      
    - name: Run tests with ${{ matrix.browser }}
      run: npm run test:headless
      env:
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
        
    - name: Generate test report
      if: always()
      run: npm run report
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.browser }}
        path: |
          reports/
          test-results/
        retention-days: 7
        
    - name: Upload HTML report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: html-report-${{ matrix.browser }}
        path: reports/cucumber-report.html
        retention-days: 30

  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile TypeScript
      run: npm run compile
      
    - name: Check for TypeScript errors
      run: npx tsc --noEmit
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: dist/
        retention-days: 7

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ All tests passed and build successful!"
        echo "Pipeline completed successfully for ${{ github.ref_name }}"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed!"
        echo "Check the logs for details on ${{ github.ref_name }}"