name: Test Reports

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM
  workflow_dispatch: # Manual trigger

env:
  NODE_VERSION: '18.x'

jobs:
  test-and-publish:
    name: Generate and Publish Test Reports
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run comprehensive test suite
      run: |
        echo "Running tests across all browsers..."
        
        # Test with Chromium
        BROWSER=chromium npm run test:headless
        npm run report
        mv reports/cucumber-report.html reports/chromium-report.html
        mv reports/cucumber-report.json reports/chromium-report.json
        
        # Test with Firefox
        BROWSER=firefox npm run test:headless
        npm run report
        mv reports/cucumber-report.html reports/firefox-report.html
        mv reports/cucumber-report.json reports/firefox-report.json
        
        # Test with WebKit
        BROWSER=webkit npm run test:headless
        npm run report
        mv reports/cucumber-report.html reports/webkit-report.html
        mv reports/cucumber-report.json reports/webkit-report.json
        
    - name: Generate comprehensive report
      run: |
        mkdir -p public
        
        # Create index.html for report dashboard
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Test Reports Dashboard</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; text-align: center; margin-bottom: 30px; }
                .browser-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px; }
                .browser-card { background: #f9f9f9; padding: 20px; border-radius: 8px; border-left: 4px solid #007acc; }
                .browser-card h3 { margin-top: 0; color: #007acc; }
                .button { display: inline-block; padding: 10px 20px; background: #007acc; color: white; text-decoration: none; border-radius: 4px; margin: 5px; }
                .button:hover { background: #005a9e; }
                .timestamp { text-align: center; color: #666; margin-top: 30px; font-style: italic; }
                .status { padding: 4px 8px; border-radius: 4px; font-weight: bold; }
                .status.passed { background: #d4edda; color: #155724; }
                .status.failed { background: #f8d7da; color: #721c24; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üß™ Test Reports Dashboard</h1>
                <p style="text-align: center; font-size: 18px; color: #666;">
                    Comprehensive test results across all supported browsers
                </p>
                
                <div class="browser-grid">
                    <div class="browser-card">
                        <h3>üåê Chromium</h3>
                        <p>Google Chrome, Microsoft Edge, and other Chromium-based browsers</p>
                        <span class="status passed">‚úÖ Passed</span>
                        <br><br>
                        <a href="chromium-report.html" class="button">View Report</a>
                        <a href="chromium-report.json" class="button">Download JSON</a>
                    </div>
                    
                    <div class="browser-card">
                        <h3>ü¶ä Firefox</h3>
                        <p>Mozilla Firefox browser compatibility testing</p>
                        <span class="status passed">‚úÖ Passed</span>
                        <br><br>
                        <a href="firefox-report.html" class="button">View Report</a>
                        <a href="firefox-report.json" class="button">Download JSON</a>
                    </div>
                    
                    <div class="browser-card">
                        <h3>üçé WebKit</h3>
                        <p>Safari and WebKit-based browser testing</p>
                        <span class="status passed">‚úÖ Passed</span>
                        <br><br>
                        <a href="webkit-report.html" class="button">View Report</a>
                        <a href="webkit-report.json" class="button">Download JSON</a>
                    </div>
                </div>
                
                <div class="timestamp">
                    Last updated: <script>document.write(new Date().toLocaleString())</script>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Copy all reports to public directory
        cp reports/*.html public/ 2>/dev/null || true
        cp reports/*.json public/ 2>/dev/null || true
        
    - name: Create test summary
      run: |
        # Generate test summary JSON
        node -e "
        const fs = require('fs');
        const reports = ['chromium', 'firefox', 'webkit'];
        const summary = { browsers: {}, timestamp: new Date().toISOString() };
        
        reports.forEach(browser => {
          try {
            const data = JSON.parse(fs.readFileSync(\`reports/\${browser}-report.json\`, 'utf8'));
            let scenarios = 0, passed = 0;
            
            data.forEach(feature => {
              feature.elements?.forEach(scenario => {
                scenarios++;
                const hasFailed = scenario.steps?.some(step => step.result?.status === 'failed');
                if (!hasFailed) passed++;
              });
            });
            
            summary.browsers[browser] = { total: scenarios, passed, failed: scenarios - passed };
          } catch (e) {
            summary.browsers[browser] = { total: 0, passed: 0, failed: 0, error: true };
          }
        });
        
        fs.writeFileSync('public/test-summary.json', JSON.stringify(summary, null, 2));
        console.log('Test Summary:', JSON.stringify(summary, null, 2));
        " || echo "Failed to generate summary"
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v5
      
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: public
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-reports
        path: |
          reports/
          test-results/
          public/
        retention-days: 30
        
    - name: Comment with report links
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentUrl = '${{ steps.deployment.outputs.page_url }}';
          
          const comment = \`## üìä Playwrigth Test Reports Published
          
          ‚úÖ **Reports are now available:**
          - üåê **Dashboard:** [\${deploymentUrl}](\${deploymentUrl})
          - üì± **Chromium:** [\${deploymentUrl}chromium-report.html](\${deploymentUrl}chromium-report.html)
          - ü¶ä **Firefox:** [\${deploymentUrl}firefox-report.html](\${deploymentUrl}firefox-report.html)
          - üçé **WebKit:** [\${deploymentUrl}webkit-report.html](\${deploymentUrl}webkit-report.html)
          
          **Generated:** \${new Date().toLocaleString()}
          
          ---
          *Automated by GitHub Actions*\`;
          
          // Create a new issue with the report links
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: \`üìä Playwrigth Test Report - \${new Date().toISOString().split('T')[0]}\`,
            body: comment,
            labels: ['test-report', 'automated']
          });